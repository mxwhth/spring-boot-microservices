version: "3.5"

services:
  postgres:
    container_name: postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 55
      POSTGRES_DB: microservice
    volumes:
        - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 3s
      retries: 5

  zookeeper:
    container_name: zookeeper
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_4LW_COMMANDS_WHITELIST=ruok,stat,conf,wchc,wchp,dirs
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "localhost", "2181" ]
      interval: 5s
      timeout: 3s
      retries: 5

  kafka:
    container_name: kafka
    image: bitnami/kafka:3.3.2
    ports:
      - "9092:9092"
    expose:
      - "9093"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ADVERTISED_LISTENERS=INSIDE://kafka:9093,OUTSIDE://kafka:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      - KAFKA_LISTENERS=INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      - KAFKA_INTER_BROKER_LISTENER_NAME=INSIDE
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    depends_on:
      - zookeeper
    healthcheck:
      test: [ "CMD", "bash", "-c", "kafka-topics.sh --bootstrap-server localhost:9093 --list || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui
    ports:
      - "9090:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka

  redis:
    container_name: redis
    image: redis:7
    command: ["redis-server", "--requirepass", "yourStrongPassword"]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=yourStrongPassword
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "yourStrongPassword", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  redisinsight:
    container_name: redisinsight
    image: redis/redisinsight:latest
    ports:
      - "5540:5540"
    depends_on:
      redis:
        condition: service_healthy
    environment:
      ## redis://default@redis:6379
      - REDISINSIGHT_REDIS_HOSTS=local:redis:6379:yourStrongPassword
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5540" ]
      interval: 15s
      timeout: 5s
      retries: 5
    restart: always

#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
#    container_name: elasticsearch
#    environment:
#      - discovery.type=single-node
#      - xpack.security.enabled=false
#      - ES_JAVA_OPTS=-Xms512m -Xmx512m
#    ports:
#      - "9200:9200"
#    volumes:
#      - es_data:/usr/share/elasticsearch/data
#    networks:
#      - elk
#    platform: linux/amd64
#    healthcheck:
#      test: [ "CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\"'" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#
#  kibana:
#    image: docker.elastic.co/kibana/kibana:8.13.4
#    container_name: kibana
#    environment:
#      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
#    ports:
#      - "5601:5601"
#    depends_on:
#      elasticsearch:
#        condition: service_healthy
#    networks:
#      - elk
#    healthcheck:
#      test: ["CMD-SHELL", "curl -s http://localhost:5601/api/status | grep -q '\"state\":\"green\"\\|\"state\":\"available\"'"]
#      interval: 10s
#      timeout: 5s
#      retries: 10
#
#  logstash:
#    image: docker.elastic.co/logstash/logstash:8.13.4
#    container_name: logstash
#    volumes:
#      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
#    depends_on:
#      elasticsearch:
#        condition: service_healthy
#    networks:
#      - elk
#    ports:
#      - "5044:5044"
#      - "5000:5000/tcp"
#      - "5000:5000/udp"
#    environment:
#      - xpack.monitoring.enabled=false
#    platform: linux/amd64
#    healthcheck:
#      test: [ "CMD", "nc", "-z", "localhost", "5044" ]
#      interval: 10s
#      timeout: 5s
#      retries: 10
#
#  filebeat:
#    image: docker.elastic.co/beats/filebeat:8.13.4
#    container_name: filebeat
#    user: root
#    volumes:
#      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
##      - /var/lib/docker/containers:/var/lib/docker/containers:ro
##      - /var/run/docker.sock:/var/run/docker.sock:ro
#      - ./logs:/logs:ro        # 映射你的本地日志目录到容器内
#    environment:
#      - setup.kibana.host=kibana:5601
#      - output.logstash.enabled=true
#    command: ["filebeat", "-e", "-strict.perms=false"]
#    depends_on:
#      - logstash
#    networks:
#      - elk

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  es_data:
    driver: local


networks:
  elk:
    driver: bridge

## colima start --cpu 4 --memory 4